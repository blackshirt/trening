// Code generated by github.com/vektah/dataloaden, DO NOT EDIT.

package models

import (
	"sync"
	"time"
)

// TrainingLoader batches and caches requests
type TrainingLoader struct {
	// this method provides the data for the loader
	fetch func(keys []int) ([]*Training, []error)

	// how long to done before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// INTERNAL

	// lazily created cache
	cache map[int]*Training

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *trainingBatch

	// mutex to prevent races
	mu sync.Mutex
}

type trainingBatch struct {
	keys    []int
	data    []*Training
	error   []error
	closing bool
	done    chan struct{}
}

// Load a training by key, batching and caching will be applied automatically
func (tl *TrainingLoader) Load(key int) (*Training, error) {
	return tl.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a training.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (tl *TrainingLoader) LoadThunk(key int) func() (*Training, error) {
	tl.mu.Lock()
	if it, ok := tl.cache[key]; ok {
		tl.mu.Unlock()
		return func() (*Training, error) {
			return it, nil
		}
	}
	if tl.batch == nil {
		tl.batch = &trainingBatch{done: make(chan struct{})}
	}
	batch := tl.batch
	pos := batch.keyIndex(tl, key)
	tl.mu.Unlock()

	return func() (*Training, error) {
		<-batch.done

		var data *Training
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.error) == 1 {
			err = batch.error[0]
		} else if batch.error != nil {
			err = batch.error[pos]
		}

		if err == nil {
			tl.mu.Lock()
			tl.unsafeSet(key, data)
			tl.mu.Unlock()
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (tl *TrainingLoader) LoadAll(keys []int) ([]*Training, []error) {
	results := make([]func() (*Training, error), len(keys))

	for i, key := range keys {
		results[i] = tl.LoadThunk(key)
	}

	trainings := make([]*Training, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		trainings[i], errors[i] = thunk()
	}
	return trainings, errors
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (tl *TrainingLoader) Prime(key int, value *Training) bool {
	tl.mu.Lock()
	var found bool
	if _, found = tl.cache[key]; !found {
		// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
		// and end up with the whole cache pointing to the same value.
		cpy := *value
		tl.unsafeSet(key, &cpy)
	}
	tl.mu.Unlock()
	return !found
}

func (tl *TrainingLoader) unsafeSet(key int, value *Training) {
	if tl.cache == nil {
		tl.cache = map[int]*Training{}
	}
	tl.cache[key] = value
}

// Clear the value at key from the cache, if it exists
func (tl *TrainingLoader) Clear(key int) {
	tl.mu.Lock()
	delete(tl.cache, key)
	tl.mu.Unlock()
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (tb *trainingBatch) keyIndex(tl *TrainingLoader, key int) int {
	for i, existingKey := range tb.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(tb.keys)
	tb.keys = append(tb.keys, key)
	if pos == 0 {
		go tb.startTimer(tl)
	}

	if tl.maxBatch != 0 && pos >= tl.maxBatch-1 {
		if !tb.closing {
			tb.closing = true
			tl.batch = nil
			go tb.end(tl)
		}
	}

	return pos
}

func (tb *trainingBatch) startTimer(tl *TrainingLoader) {
	time.Sleep(tl.wait)
	tl.mu.Lock()

	// we must have hit a batch limit and are already finalizing this batch
	if tb.closing {
		tl.mu.Unlock()
		return
	}

	tl.batch = nil
	tl.mu.Unlock()

	tb.end(tl)
}

func (tb *trainingBatch) end(tl *TrainingLoader) {
	tb.data, tb.error = tl.fetch(tb.keys)
	close(tb.done)
}
